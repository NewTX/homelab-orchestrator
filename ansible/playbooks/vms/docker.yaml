---
- name: Post Configuration
  hosts: omv-loki.vikaspogu.internal
  gather_facts: false
  become: true
  vars_files:
    - ../../vars/common.vault.yaml
  pre_tasks:
    - name: Wait 600 seconds for target connection to become reachable/usable
      ansible.builtin.wait_for_connection:
        delay: 5
        timeout: 600
    - name: Wait for cloud init to finish
      community.general.cloud_init_data_facts:
        filter: status
      register: res
      until: 'res.cloud_init_data_facts.status.v1.stage is defined and not res.cloud_init_data_facts.status.v1.stage'
      retries: 50
      delay: 5
    - name: Gathering facts
      setup:
  roles:
    - role: ansible-role-docker
      vars:
        docker_install_compose: true
  tasks:
    - name: Install required packages
      ansible.builtin.apt:
        name:
          - qemu-guest-agent
          - git
          - wget
          - unzip
          - tar
          - rsync
          - python3
          - python3-pip
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - virtualenv

    - name: Update apt repo and cache on all Debian/Ubuntu boxes
      ansible.builtin.apt:
        update_cache: true
        force_apt_get: true
        cache_valid_time: 3600

    - name: Upgrade all packages on servers
      ansible.builtin.apt:
        upgrade: dist
        force_apt_get: true

    - name: Check if a reboot is needed on all servers
      register: reboot_required_file
      ansible.builtin.stat:
        path: /var/run/reboot-required

    - name: Reboot the box if kernel updated
      ansible.builtin.reboot:
        msg: 'Reboot initiated by Ansible for kernel updates'
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when: reboot_required_file.stat.exists

    - name: Enable a timer unit for dnf-automatic
      ansible.builtin.systemd_service:
        name: qemu-guest-agent
        state: started
        enabled: true

    - name: Create a directory to store the komodo files
      ansible.builtin.file:
        path: /home/{{ ansible_user }}/komodo
        state: directory

    - name: Create core config
      ansible.builtin.copy:
        dest: /home/{{ ansible_user }}/komodo/config.toml
        content: '{{komodo_core_config}}'

    - name: Template a file for the komodo-compose.yaml file
      ansible.builtin.template:
        src: '../../templates/komodo-compose.yaml.j2'
        dest: /home/{{ ansible_user }}/komodo/compose.yaml

    - name: Create env file
      ansible.builtin.copy:
        dest: /home/{{ ansible_user }}/komodo/compose.env
        content: '{{komodo_compose_env}}'

    - name: Docker compose deploy
      ansible.builtin.command: docker compose -p komodo -f compose.yaml --env-file compose.env up -d
      args:
        chdir: /home/{{ ansible_user }}/komodo
