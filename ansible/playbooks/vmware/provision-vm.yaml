---
- name: create vm Playbook
  hosts: localhost
  become: false
  gather_facts: false
  vars_files:
    - ../../vars/common.vault.yaml
  vars:
    vm_name: testvm
  environment:
    VMWARE_HOST: '{{ vcenter.hostname }}'
    VMWARE_USER: '{{ vcenter.admin_username }}'
    VMWARE_PASSWORD: '{{ vcenter.admin_password }}'
    VMWARE_VALIDATE_CERTS: 'false'
  tasks:
    # - name: create folder
    #   community.vmware.vcenter_folder:
    #     datacenter_name: 'homelab'
    #     folder_name: 'rhel9_vms'
    #     folder_type: vm
    #     state: present

    - name: create VM
      community.vmware.vmware_guest:
        datacenter: 'homelab'
        name: '{{vm_name}}'
        folder: ''
        state: 'poweredoff'
        template: 'RHEL9_Template'
        cluster: 'cluster1'
        disk:
          - size_gb: '18'
            type: 'thin'
            datastore: 'datastore1'
        hardware:
          memory_mb: '4096'
          num_cpus: '2'
          scsi: 'paravirtual'

    - name: configure VM
      community.vmware.vmware_guest:
        name: '{{vm_name}}'
        advanced_settings:
          - key: 'guestinfo.metadata'
            value: "{{ lookup('ansible.builtin.template', '../../templates/meta-data.j2') | b64encode }}"
          - key: 'guestinfo.metadata.encoding'
            value: 'base64'
          - key: 'guestinfo.userdata'
            value: "{{ lookup('ansible.builtin.template', '../../templates/user-data.j2') | b64encode }}"
          - key: 'guestinfo.userdata.encoding'
            value: 'base64'

    - name: Start VM
      community.vmware.vmware_guest:
        name: '{{vm_name}}'
        state: poweredon
        wait_for_ip_address: true
      register: vm_details

    - ansible.builtin.debug:
        msg: '{{vm_details.instance.ipv4}}'

    - delegate_to: '{{vm_details.instance.ipv4}}'
      name: Configure system
      become: true
      block:
        - name: Read device information (always use unit when probing)
          community.general.parted:
            device: /dev/sda
            unit: MiB
          register: disk_info

        - name: Extend an existing partition to fill all available space
          community.general.parted:
            device: /dev/sda
            number: '{{ disk_info.partitions | length }}'
            label: gpt
            unit: MiB
            part_end: '100%'
            state: present
            resize: true

        - name: Extend the LVM to the new space on {{ disk }}
          community.general.lvg:
            vg: 'rhel'
            pvs: '/dev/sda{{ disk_info.partitions | length }}'
            pvresize: true

        - name: Extend the logical volume to take all remaining space of the PVs and resize the underlying filesystem
          community.general.lvol:
            vg: rhel
            lv: root
            size: +100%FREE
            resizefs: true
        - name: Add user to sudoers file
          ansible.builtin.copy:
            dest: '/etc/sudoers.d/{{item}}'
            content: |
              {{item}} ALL=(ALL) ALL
            validate: 'visudo -cf %s'
          with_items:
            - test
        - name: Run the command module
          ansible.builtin.command:
            cmd: subscription-manager identity
          register: subscription_result

        - name: Register only when subscription identity is empty
          when: subscription_result.stdout.find('system identity') == -1
          block:
            - name: Download katello rpm from satellite capsule
              ansible.builtin.dnf:
                name: '{{ item }}/pub/katello-ca-consumer-latest.noarch.rpm'
                state: present
                validate_certs: no
                disable_gpg_check: yes
              with_items:
                - '{{satellite.url}}'

            - name: Register system and add subscription
              redhat.satellite.registration_command:
                username: '{{satellite.username}}'
                password: '{{satellite.password}}'
                activation_keys:
                  - '{{satellite.keys}}'
                organization: '{{satellite.org}}'
                server_url: '{{satellite.url}}'
                validate_certs: false
              register: registration_result
              delegate_to: localhost
              become: false

            - name: Perform registration
              ansible.builtin.shell:
                cmd: |
                  set -o pipefail
                  {{ registration_result.registration_command }}

        - name: Enable SELinux in enforcing mode
          ansible.posix.selinux:
            policy: targeted
            state: enforcing

        - name: Run the command module
          ansible.builtin.command:
            cmd: '{{item}}'
          with_items:
            - fips-mode-setup --disable
            - update-crypto-policies --set DEFAULT:AD-SUPPORT

        - name: Install packages
          ansible.builtin.dnf:
            name:
              # - common-tools
              - realmd
              - oddjob
              - oddjob-mkhomedir
              - sssd
              - adcli
              - krb5-workstation
              - authconfig
            state: present

        - name: Remove all wireless packages
          ansible.builtin.package:
            name: 'iwl*'
            state: absent
